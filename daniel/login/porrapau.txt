<!DOCTYPE html>
<html lang="pt-BR">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>SENAI Encaminhamento</title>
    <style>
        * {
            margin: 0;
            padding: 0;
            box-sizing: border-box;
            font-family: Arial, sans-serif;
        }
        
        body {
            background-color: #f5f5f5;
        }
        
        .app {
            min-height: 100vh;
            display: flex;
            flex-direction: column;
        }
        
        .navbar {
            background-color: #d32f2f;
            color: white;
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .navbar-brand {
            font-size: 1.5rem;
            font-weight: bold;
        }
        
        .navbar-brand a {
            color: white;
            text-decoration: none;
        }
        
        .navbar-nav {
            display: flex;
            list-style: none;
        }
        
        .nav-item {
            margin-left: 1rem;
        }
        
        .nav-link {
            color: white;
            text-decoration: none;
            padding: 0.5rem;
            border-radius: 4px;
        }
        
        .nav-link:hover {
            background-color: rgba(255, 255, 255, 0.2);
        }
        
        .main-content {
            flex-grow: 1;
            padding: 1rem;
        }
        
        .page-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: calc(100vh - 4rem);
        }
        
        .card, .auth-card {
            background-color: white;
            border-radius: 8px;
            padding: 2rem;
            box-shadow: 0 2px 10px rgba(0, 0, 0, 0.1);
            width: 100%;
            max-width: 500px;
        }
        
        .home-container {
            text-align: center;
        }
        
        .home-container h1 {
            margin-bottom: 1rem;
            color: #333;
        }
        
        .home-container p {
            margin-bottom: 2rem;
            color: #666;
        }
        
        .home-buttons {
            display: flex;
            justify-content: center;
            gap: 1rem;
        }
        
        .btn-primary, .btn-secondary, .btn-logout {
            padding: 0.75rem 1.5rem;
            border: none;
            border-radius: 4px;
            cursor: pointer;
            font-weight: bold;
            text-decoration: none;
            display: inline-block;
            transition: background-color 0.3s;
        }
        
        .btn-primary {
            background-color: #d32f2f;
            color: white;
        }
        
        .btn-primary:hover {
            background-color: #b71c1c;
        }
        
        .btn-secondary {
            background-color: #f5f5f5;
            color: #333;
            border: 1px solid #ddd;
        }
        
        .btn-secondary:hover {
            background-color: #e0e0e0;
        }
        
        .btn-logout {
            background-color: #f44336;
            color: white;
        }
        
        .btn-logout:hover {
            background-color: #d32f2f;
        }
        
        .auth-container {
            display: flex;
            justify-content: center;
            align-items: center;
            min-height: calc(100vh - 4rem);
        }
        
        .auth-card {
            width: 100%;
            max-width: 400px;
            margin: 0 auto;
        }
        
        .auth-card h2 {
            text-align: center;
            margin-bottom: 1.5rem;
            color: #333;
        }
        
        .form-group {
            margin-bottom: 1rem;
        }
        
        .form-group label {
            display: block;
            margin-bottom: 0.5rem;
            color: #666;
        }
        
        .form-group input {
            width: 100%;
            padding: 0.75rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            font-size: 1rem;
        }
        
        .error-message {
            color: #f44336;
            margin-bottom: 1rem;
            padding: 0.5rem;
            background-color: #ffebee;
            border-radius: 4px;
        }
        
        .success-message {
            color: #4caf50;
            margin-bottom: 1rem;
            padding: 0.5rem;
            background-color: #e8f5e9;
            border-radius: 4px;
        }
        
        .auth-footer {
            margin-top: 1.5rem;
            text-align: center;
        }
        
        .auth-footer a {
            color: #d32f2f;
            text-decoration: none;
        }
        
        .auth-footer a:hover {
            text-decoration: underline;
        }
        
        .dashboard-container {
            max-width: 1200px;
            margin: 0 auto;
            padding: 1rem;
        }
        
        .dashboard-container h1 {
            margin-bottom: 1rem;
            color: #333;
        }
        
        .separator {
            height: 1px;
            background-color: #ddd;
            margin: 1rem 0;
        }
        
        .dashboard-content {
            margin-top: 1rem;
        }
        
        .container {
            margin-top: 1rem;
        }
        
        .table-section {
            margin-bottom: 2rem;
            border: 1px solid #ddd;
            border-radius: 4px;
            overflow: hidden;
        }
        
        .table-header {
            background-color: #f5f5f5;
            padding: 1rem;
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #ddd;
        }
        
        .header-content {
            font-weight: bold;
            display: flex;
            align-items: center;
            background: none;
            border: none;
            cursor: pointer;
            padding: 0;
            font-size: 1rem;
        }
        
        .toggle-icon {
            margin-left: 0.5rem;
            font-size: 0.8rem;
        }
        
        .search-bar {
            position: relative;
            width: 200px;
        }
        
        .search-input {
            width: 100%;
            padding: 0.5rem;
            padding-right: 2rem;
            border: 1px solid #ddd;
            border-radius: 4px;
        }
        
        .search-icon {
            position: absolute;
            right: 0.5rem;
            top: 50%;
            transform: translateY(-50%);
            width: 1rem;
            height: 1rem;
            background-image: url('data:image/svg+xml;utf8,<svg xmlns="http://www.w3.org/2000/svg" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2" stroke-linecap="round" stroke-linejoin="round"><circle cx="11" cy="11" r="8"/><line x1="21" y1="21" x2="16.65" y2="16.65"/></svg>');
            background-repeat: no-repeat;
            background-position: center;
        }
        
        .table-content {
            padding: 1rem;
            background-color: white;
        }
        
        .table-content.collapsed {
            display: none;
        }
        
        .item {
            padding: 1rem;
            border-bottom: 1px solid #ddd;
            display: flex;
            justify-content: space-between;
            align-items: center;
        }
        
        .item:last-child {
            border-bottom: none;
        }
        
        .item-info {
            flex-grow: 1;
        }
        
        .item-aluno {
            font-weight: bold;
            margin-bottom: 0.25rem;
        }
        
        .item-turma {
            color: #666;
            font-size: 0.9rem;
        }
        
        .item-status {
            padding: 0.5rem 1rem;
            border-radius: 4px;
            font-weight: bold;
            cursor: pointer;
        }
        
        .aguardo {
            background-color: #ffecb3;
            color: #ff6f00;
        }
        
        .encerrado {
            background-color: #c8e6c9;
            color: #2e7d32;
        }
        
        .no-data-message {
            padding: 1rem;
            text-align: center;
            color: #666;
        }
        
        .title-pendente {
            color: #ff6f00;
            text-align: center;
            margin-bottom: 1rem;
        }
        
        .title-encerred {
            color: #2e7d32;
            text-align: center;
            margin-bottom: 1rem;
        }
        
        .background-image {
            position: fixed;
            top: 0;
            left: 0;
            width: 100%;
            height: 100%;
            background-image: url('/api/placeholder/1920/1080');
            background-size: cover;
            background-position: center;
            background-repeat: no-repeat;
            z-index: -1;
            opacity: 0.3;
        }
        
        /* Responsividade */
        @media (max-width: 768px) {
            .navbar {
                flex-direction: column;
            }
            
            .navbar-nav {
                margin-top: 1rem;
            }
            
            .table-header {
                flex-direction: column;
            }
            
            .search-bar {
                width: 100%;
                margin-top: 1rem;
            }
        }
    </style>
</head>
<body>
    <div class="app">
        <nav class="navbar">
            <div class="navbar-brand">
                <a href="#" id="nav-home">SENAI Encaminhamento</a>
            </div>
            <ul class="navbar-nav">
                <li class="nav-item">
                    <a href="#" class="nav-link" id="nav-inicio">Início</a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" id="nav-dashboard">Dashboard</a>
                </li>
                <li class="nav-item">
                    <a href="#" class="nav-link" id="nav-pendentes">Pendentes</a>
                </li>
            </ul>
        </nav>

        <main class="main-content">
            <div id="page-content"></div>
        </main>
    </div>

    <script>
        // Dados simulados
        const encaminhamentosData = [
            { aluno: "Maria Silva", turma: "3º Ano - EM", status: "Em aguardo" },
            { aluno: "João Costa", turma: "2º Ano - EM", status: "Encerrado" },
            { aluno: "Ana Souza", turma: "1º Ano - EM", status: "Em aguardo" },
            { aluno: "Pedro Santos", turma: "3º Ano - EM", status: "Encerrado" },
            { aluno: "Carla Oliveira", turma: "2º Ano - EM", status: "Em aguardo" },
            { aluno: "Lucas Martins", turma: "1º Ano - EM", status: "Encerrado" }
        ];

        const fiapData = [
            { aluno: "Juliana Ferreira", turma: "3º Ano - EM", status: "Encerrado" },
            { aluno: "Gabriel Almeida", turma: "2º Ano - EM", status: "Em aguardo" },
            { aluno: "Mariana Castro", turma: "1º Ano - EM", status: "Encerrado" },
            { aluno: "Thiago Lima", turma: "3º Ano - EM", status: "Em aguardo" },
            { aluno: "Fernanda Dias", turma: "2º Ano - EM", status: "Encerrado" },
            { aluno: "Rafael Moreira", turma: "1º Ano - EM", status: "Em aguardo" }
        ];

        // Funções de filtragem
        function filterEncaminhamentos(data, searchTerm) {
            if (!searchTerm) return data;
            return data.filter(item => 
                item.aluno.toLowerCase().includes(searchTerm.toLowerCase()) || 
                item.turma.toLowerCase().includes(searchTerm.toLowerCase())
            );
        }

        function filterFiap(data, searchTerm) {
            if (!searchTerm) return data;
            return data.filter(item => 
                item.aluno.toLowerCase().includes(searchTerm.toLowerCase()) || 
                item.turma.toLowerCase().includes(searchTerm.toLowerCase())
            );
        }

        // Função para alternar status
        function toggleItemStatus(item) {
            item.status = item.status === 'Em aguardo' ? 'Encerrado' : 'Em aguardo';
            return item;
        }

        // Funções para renderizar páginas
        function renderHomePage() {
            const content = `
                <div class="background-image"></div>
                <div class="page-container">
                    <div class="card">
                        <div class="home-container">
                            <h1>Sistema de Autenticação</h1>
                            <p>Faça login ou registre uma conta para continuar.</p>
                            <div class="home-buttons">
                                <a href="#" class="btn-primary" id="btn-login">Login</a>
                                <a href="#" class="btn-secondary" id="btn-register">Registrar</a>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            document.getElementById('page-content').innerHTML = content;
            
            // Event listeners
            document.getElementById('btn-login').addEventListener('click', () => renderLoginPage());
            document.getElementById('btn-register').addEventListener('click', () => renderRegisterPage());
        }

        function renderLoginPage() {
            const content = `
                <div class="auth-container">
                    <div class="auth-card">
                        <h2>Login</h2>
                        <div id="login-error" class="error-message" style="display: none;"></div>
                        <form id="login-form">
                            <div class="form-group">
                                <label for="email">Email</label>
                                <input type="email" id="email" required>
                            </div>
                            <div class="form-group">
                                <label for="password">Senha</label>
                                <input type="password" id="password" required>
                            </div>
                            <button type="submit" class="btn-primary">Entrar</button>
                        </form>
                        <div class="auth-footer">
                            <p>Não tem uma conta? <a href="#" id="link-register">Registre-se!</a></p>
                        </div>
                    </div>
                </div>
            `;
            document.getElementById('page-content').innerHTML = content;
            
            // Event listeners
            document.getElementById('link-register').addEventListener('click', () => renderRegisterPage());
            document.getElementById('login-form').addEventListener('submit', handleLogin);
        }

        function renderRegisterPage() {
            const content = `
                <div class="auth-container">
                    <div class="auth-card">
                        <h2>Criar Conta</h2>
                        <div id="register-error" class="error-message" style="display: none;"></div>
                        <div id="register-success" class="success-message" style="display: none;">Conta criada. Aguarde, você está sendo redirecionado para login...</div>
                        <form id="register-form">
                            <div class="form-group">
                                <label for="name">Nome</label>
                                <input type="text" id="name" required>
                            </div>
                            <div class="form-group">
                                <label for="email">Email</label>
                                <input type="email" id="email" required>
                            </div>
                            <div class="form-group">
                                <label for="password">Senha</label>
                                <input type="password" id="password" required>
                            </div>
                            <div class="form-group">
                                <label for="confirmPassword">Confirmar Senha</label>
                                <input type="password" id="confirmPassword" required>
                            </div>
                            <button type="submit" class="btn-primary">Registrar</button>
                        </form>
                        <div class="auth-footer">
                            <p>Já possui uma conta? <a href="#" id="link-login">Faça login</a></p>
                        </div>
                    </div>
                </div>
            `;
            document.getElementById('page-content').innerHTML = content;
            
            // Event listeners
            document.getElementById('link-login').addEventListener('click', () => renderLoginPage());
            document.getElementById('register-form').addEventListener('submit', handleRegister);
        }

        function renderDashboardPage() {
            const user = JSON.parse(localStorage.getItem('user'));
            if (!user) {
                renderLoginPage();
                return;
            }
            
            // Filtrar apenas itens encerrados
            const encerradosEncaminhamentos = encaminhamentosData.filter(item => item.status === 'Encerrado');
            const encerradosFiap = fiapData.filter(item => item.status === 'Encerrado');
            
            const content = `
                <div class="dashboard-container">
                    <h1>Bem-vindo, ${user.name}!</h1>
                    <button id="btn-logout" class="btn-logout">Sair</button>
                    <div class="separator"></div>
                    <div class="dashboard-content">
                        <div class="encerred-title">
                            <h1 class="title-encerred">Encerrado</h1>
                        </div>
                        <div class="container">
                            <!-- Seção de Encaminhamentos -->
                            <div class="table-section">
                                <div class="table-header toggle-header" data-target="encaminhamentos">
                                    <button class="header-content" id="toggle-encaminhamentos">
                                        ENCAMINHAMENTO
                                        <span class="toggle-icon">▼</span>
                                    </button>
                                    <div class="search-bar">
                                        <input type="text" placeholder="Pesquisar" class="search-input" id="search-encaminhamento">
                                        <div class="search-icon"></div>
                                    </div>
                                </div>
                                <div class="table-content" id="encaminhamentos-section">
                                    <div class="content" id="encaminhamentos-content">
                                        ${renderItems(encerradosEncaminhamentos, 'encaminhamentos')}
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Seção de FIAP -->
                            <div class="table-section">
                                <div class="table-header toggle-header" data-target="fiap">
                                    <button class="header-content" id="toggle-fiap">
                                        FIAP
                                        <span class="toggle-icon">▼</span>
                                    </button>
                                    <div class="search-bar">
                                        <input type="text" placeholder="Pesquisar" class="search-input" id="search-fiap">
                                        <div class="search-icon"></div>
                                    </div>
                                </div>
                                <div class="table-content" id="fiap-section">
                                    <div class="content" id="fiap-content">
                                        ${renderItems(encerradosFiap, 'fiap')}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            document.getElementById('page-content').innerHTML = content;
            
            // Event listeners
            document.getElementById('btn-logout').addEventListener('click', handleLogout);
            document.getElementById('toggle-encaminhamentos').addEventListener('click', () => toggleSection('encaminhamentos-section'));
            document.getElementById('toggle-fiap').addEventListener('click', () => toggleSection('fiap-section'));
            document.getElementById('search-encaminhamento').addEventListener('input', handleSearchEncaminhamento);
            document.getElementById('search-fiap').addEventListener('input', handleSearchFiap);
            
            // Adicionar event listeners para os itens de status
            addStatusEventListeners();
        }

        function renderPendentesPage() {
            const user = JSON.parse(localStorage.getItem('user'));
            if (!user) {
                renderLoginPage();
                return;
            }
            
            // Filtrar apenas itens pendentes
            const pendingEncaminhamentos = encaminhamentosData.filter(item => item.status === 'Em aguardo');
            const pendingFiap = fiapData.filter(item => item.status === 'Em aguardo');
            
            const content = `
                <div class="dashboard-container">
                    <h1>Bem-vindo, ${user.name}!</h1>
                    <button id="btn-logout" class="btn-logout">Sair</button>
                    <div class="separator"></div>
                    <div class="dashboard-content">
                        <div class="pending-title">
                            <h1 class="title-pendente">Pendente</h1>
                        </div>
                        <div class="container">
                            <!-- Seção de Encaminhamentos -->
                            <div class="table-section">
                                <div class="table-header toggle-header" data-target="encaminhamentos-pendentes">
                                    <button class="header-content" id="toggle-encaminhamentos-pendentes">
                                        ENCAMINHAMENTO
                                        <span class="toggle-icon">▼</span>
                                    </button>
                                    <div class="search-bar">
                                        <input type="text" placeholder="Pesquisar" class="search-input" id="search-encaminhamento-pendentes">
                                        <div class="search-icon"></div>
                                    </div>
                                </div>
                                <div class="table-content" id="encaminhamentos-pendentes-section">
                                    <div class="content" id="encaminhamentos-pendentes-content">
                                        ${renderItems(pendingEncaminhamentos, 'encaminhamentos')}
                                    </div>
                                </div>
                            </div>
                            
                            <!-- Seção de FIAP -->
                            <div class="table-section">
                                <div class="table-header toggle-header" data-target="fiap-pendentes">
                                    <button class="header-content" id="toggle-fiap-pendentes">
                                        FIAP
                                        <span class="toggle-icon">▼</span>
                                    </button>
                                    <div class="search-bar">
                                        <input type="text" placeholder="Pesquisar" class="search-input" id="search-fiap-pendentes">
                                        <div class="search-icon"></div>
                                    </div>
                                </div>
                                <div class="table-content" id="fiap-pendentes-section">
                                    <div class="content" id="fiap-pendentes-content">
                                        ${renderItems(pendingFiap, 'fiap')}
                                    </div>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>
            `;
            document.getElementById('page-content').innerHTML = content;
            
            // Event listeners
            document.getElementById('btn-logout').addEventListener('click', handleLogout);
            document.getElementById('toggle-encaminhamentos-pendentes').addEventListener('click', () => toggleSection('encaminhamentos-pendentes-section'));
            document.getElementById('toggle-fiap-pendentes').addEventListener('click', () => toggleSection('fiap-pendentes-section'));
            document.getElementById('search-encaminhamento-pendentes').addEventListener('input', handleSearchEncaminhamentoPendentes);
            document.getElementById('search-fiap-pendentes').addEventListener('input', handleSearchFiapPendentes);
            
            // Adicionar event listeners para os itens de status
            addStatusEventListeners();
        }

        // Funções auxiliares para renderização
        function renderItems(data, type) {
            if (data.length === 0) {
                return `<p class="no-data-message">Não há ${type === 'encaminhamentos' ? 'encaminhamentos' : 'FIAPs'} ${type.includes('pendentes') || (data.length > 0 && data[0].status === 'Em aguardo') ? 'pendentes' : 'encerrados'}.</p>`;
            }
            
            return data.map((item, index) => `
                <div class="item" data-type="${type}" data-index="${index}">
                    <div class="item-info">
                        <div class="item-aluno">${item.aluno}</div>
                        <div class="item-turma">${item.turma}</div>
                    </div>
                    <div class="item-status ${item.status === 'Em aguardo' ? 'aguardo' : 'encerrado'}" data-aluno="${item.aluno}" data-turma="${item.turma}" data-status="${item.status}" data-type="${type}">
                        ${item.status}
                    </div>
                </div>
            `).join('');
        }

        function addStatusEventListeners() {
            const statusElements = document.querySelectorAll('.item-status');
            statusElements.forEach(element => {
                element.addEventListener('click', function() {
                    const aluno = this.getAttribute('data-aluno');
                    const turma = this.getAttribute('data-turma');
                    const type = this.getAttribute('data-type');
                    
                    // Encontrar o item nos dados
                    let item;
                    if (type.includes('encaminhamentos')) {
                        item = encaminhamentosData.find(i => i.aluno === aluno && i.turma === turma);
                    } else {
                        item = fiapData.find(i => i.aluno === aluno && i.turma === turma);
                    }
                    
                    if (item) {
                        // Alternar status
                        toggleItemStatus(item);
                        
                        // Atualizar a UI removendo o item
                        this.parentElement.remove();
                        
                        // Verificar se não há mais itens e mostrar mensagem
                        const contentId = type.includes('pendentes') ? 
                            `${type}-content` : 
                            `${type}-content`;
                        
                        const contentElement = document.getElementById(contentId);
                        if (contentElement && contentElement.children.length === 0) {
                            contentElement.innerHTML = `<p class="no-data-message">Não há ${type === 'encaminhamentos' ? 'encaminhamentos' : 'FIAPs'} ${type.includes('pendentes') || item.status === 'Em aguardo' ? 'encerrados' : 'pendentes'}.</p>`;
                        }
                    }
                });
            });
        }

        function toggleSection(sectionId) {
            const section = document.getElementById(sectionId);
            if (section) {
                section.classList.toggle('collapsed');
            }
        }

        // Funções de busca
        function handleSearchEncaminhamento(event) {
            const searchTerm = event.target.value;
            const encerradosEncaminhamentos = encaminhamentosData.filter(item => item.status === 'Encerrado');
            const filtered = filterEncaminhamentos(encerradosEncaminhamentos, searchTerm);
            document.getElementById('encaminhamentos-content').innerHTML = renderItems(filtered, 'encaminhamentos');
            addStatusEventListeners();
        }

        function handleSearchFiap(event) {
            const searchTerm = event.target.value;
            const encerradosFiap = fiapData.filter(item => item.status === 'Encerrado');
            const filtered = filterFiap(encerradosFiap, searchTerm);
            document.getElementById('fiap-content').innerHTML = renderItems(filtered, 'fiap');
            addStatusEventListeners();
        }

        function handleSearchEncaminhamentoPendentes(event) {
            const searchTerm = event.target.value;
            const pendingEncaminhamentos = encaminhamentosData.filter(item => item.status === 'Em aguardo');
            const filtered = filterEncaminhamentos(pendingEncaminhamentos, searchTerm);
            document.getElementById('encaminhamentos-pendentes-content').innerHTML = renderItems(filtered, 'encaminhamentos-pendentes');
            addStatusEventListeners();
        }

        function handleSearchFiapPendentes(event) {
            const searchTerm = event.target.value;
            const pendingFiap = fiapData.filter(item => item.status === 'Em aguardo');
            const filtered = filterFiap(pendingFiap, searchTerm);
            document.getElementById('fiap-pendentes-content').innerHTML = renderItems(filtered, 'fiap-pendentes');
            addStatusEventListeners();
        }

        // Funções de autenticação
        function handleLogin(event) {
            event.preventDefault();
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            
            // Validar login
            const storedUsers = JSON.parse(localStorage.getItem('registeredUsers')) || [];
            const user = storedUsers.find(u => u.email === email && u.password === password);
            
            if (user) {
                // Login bem-sucedido
                const userData = {
                    id: user.id,
                    name: user.name,
                    email: user.email
                };
                
                localStorage.setItem('user', JSON.stringify(userData));
                renderDashboardPage();
                updateNavVisibility();
            } else {
                // Login falhou
                const errorElement = document.getElementById('login-error');
                errorElement.textContent = 'Opa, parece que você errou seu email ou senha.';
                errorElement.style.display = 'block';
            }
        }

        function handleRegister(event) {
            event.preventDefault();
            const name = document.getElementById('name').value;
            const email = document.getElementById('email').value;
            const password = document.getElementById('password').value;
            const confirmPassword = document.getElementById('confirmPassword').value;
            
            // Validar
            const errorElement = document.getElementById('register-error');
            const successElement = document.getElementById('register-success');
            
            errorElement.style.display = 'none';
            successElement.style.display = 'none';
            
            if (password !== confirmPassword) {
                errorElement.textContent = 'Senhas incompatíveis';
                errorElement.style.display = 'block';
                return;
            }
            
            // Verificar se email já está cadastrado
            const storedUsers = JSON.parse(localStorage.getItem('registeredUsers')) || [];
            if (storedUsers.some(user => user.email === email)) {
                errorElement.textContent = 'Este email já está cadastrado.';
                errorElement.style.display = 'block';
                return;
            }
            
            // Criar novo usuário
            const newUser = {
                id: Date.now(),
                name,
                email,
                password,
                registerDate: new Date().toLocaleDateString()
            };
            
            // Adicionar à lista
            const updatedUsers = [...storedUsers, newUser];
            localStorage.setItem('registeredUsers', JSON.stringify(updatedUsers));
            
            // Mostrar mensagem de sucesso
            successElement.style.display = 'block';
            
            // Redirecionar para login após 2 segundos
            setTimeout(() => {
                renderLoginPage();
            }, 2000);
        }
        
        function handleLogout() {
            localStorage.removeItem('user');
            renderHomePage();
            updateNavVisibility();
        }
        
        // Funções de navegação
        function updateNavVisibility() {
            const user = JSON.parse(localStorage.getItem('user'));
            const navDashboard = document.getElementById('nav-dashboard');
            const navPendentes = document.getElementById('nav-pendentes');
            
            if (user) {
                navDashboard.style.display = 'block';
                navPendentes.style.display = 'block';
            } else {
                navDashboard.style.display = 'none';
                navPendentes.style.display = 'none';
            }
        }

        // Inicializar a aplicação
        function initApp() {
            // Configurar navegação
            document.getElementById('nav-home').addEventListener('click', (e) => {
                e.preventDefault();
                renderHomePage();
            });
            
            document.getElementById('nav-inicio').addEventListener('click', (e) => {
                e.preventDefault();
                renderHomePage();
            });
            
            document.getElementById('nav-dashboard').addEventListener('click', (e) => {
                e.preventDefault();
                const user = JSON.parse(localStorage.getItem('user'));
                if (user) {
                    renderDashboardPage();
                } else {
                    renderLoginPage();
                }
            });
            
            document.getElementById('nav-pendentes').addEventListener('click', (e) => {
                e.preventDefault();
                const user = JSON.parse(localStorage.getItem('user'));
                if (user) {
                    renderPendentesPage();
                } else {
                    renderLoginPage();
                }
            });
            
            // Verificar se o usuário está logado
            updateNavVisibility();
            
            // Renderizar a página inicial
            const user = JSON.parse(localStorage.getItem('user'));
            if (user) {
                renderDashboardPage();
            } else {
                renderHomePage();
            }
        }

        // Iniciar a aplicação quando o DOM estiver carregado
        document.addEventListener('DOMContentLoaded', initApp);